/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ldias-da <ldias-da@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/10 00:22:53 by ldias-da          #+#    #+#             */
/*   Updated: 2025/03/10 18:10:33 by ldias-da         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>

int		ft_strlen(char *str);
char	*ft_strndup(char *src, int n);
int		arr_len(char *str, char *charset);
char	*mult_strstr(char *hay, char *nee);

char	**ft_split(char *str, char *charset)
{
	char	**str_arr;
	int		i;
	int		j;
	int		len;
	
	i = 0;
	j = 0;
	len = arr_len(str, charset);
	str_arr = malloc((len + 1) * sizeof(char *));
	if (!str_arr)
		return (NULL);
	while (i < len)
	{
		j = 0;
		str_arr[i] = mult_strstr(str, charset);
		j = ft_strlen(str_arr[i]);
		str += j + 1;
		i++;
	}
	str_arr[i] = NULL;
	return str_arr;
}

// Function that looks for any single char of nee in hay,
// and returns the spliced string up to that point
char	*mult_strstr(char *hay, char *nee)
{
	int		i;
	int		j;
	char	*splice;
	
	i = 0;
	j = 0;
	while (i < ft_strlen(hay))
	{
		j = 0;
		while (j < ft_strlen(nee))
		{
			if (hay[i] == nee[j])
			{
				splice = ft_strndup(hay, i);
				return (splice);
			}
			else if (!hay[i + 1])
			{
				splice = ft_strndup(hay, i + 1);
				return (splice);
			}
			j++;
		}
		i++;
	}
	splice = "\0";
	return (splice);
}

// Function that returns the amount of strings that will be created with ft_split
int	arr_len(char *str, char *charset)
{
	int	i;
	int	j;
	int	len;
	int	flag;

	i = 0;
	len = 0;
	flag = 0;
	while (i < ft_strlen(str))
	{
		j = i;
		while (j < ft_strlen(charset))
		{
			if (str[i] == charset[j] && flag != 1)
			{
				len++;
				flag = 1;
			}
			else if (str[i] == charset[j])
				break;
			else
				flag = 0;
			j++;
		}
		i++;
	}
	return (len + 1);
}

char	*ft_strndup(char *src, int n)
{
	char	*dup;
	int		i;

	i = 0;
	dup = malloc((ft_strlen(src) + 1) * sizeof(char));
	if(!dup)
		return (NULL);
	while (src[i] && i < n)
	{
		dup[i] = src[i];
		i++;
	}
	dup[i] = '\0';
	return (dup);
}

int	ft_strlen(char *str)
{
	int	len;

	len = 0;
	while (*str)
	{
		len++;
		str++;
	}
	return (len);
}

#include <stdio.h>

int	main(void)
{
	char *str = "hello,;my,name,is";
	char *charset = ".;,";
	char **array;
	int  i = 0;

	array = ft_split(str, charset);

	printf("%s\n", array[i]);
	while (array[i])
	{
		printf("%s\n", array[i + 1]);
		i++;
	}
	printf("%s\n", array[i + 1]);
}
